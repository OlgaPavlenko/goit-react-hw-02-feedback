{"version":3,"sources":["components/Feedback/Section.js","components/Feedback/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","map","id","name","type","onClick","Notification","message","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","setState","prevState","this","onChanged","feedbackChanged","Component","ReactDOM","render","document","querySelector"],"mappings":"4LASeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,M,OCOUC,EAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,qBAAKC,UAAU,eAAf,SACGF,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAb,OACX,wBAAQA,KAAK,SAAkBC,QAAS,kBAAMN,EAAgBK,IAA9D,SACGD,GADwBD,SCHlB,SAASI,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,IAGdD,EAAaE,aAAe,CAC1BD,QAAS,qBCJX,IAmCeE,EAnCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CAEW,IAAVD,EACC,cAACP,EAAD,CAAcC,QAAQ,sBAEtB,+BACE,+BACE,yCACA,+BAAOG,OAET,+BACE,4CACA,+BAAOC,OAET,+BACE,wCACA,+BAAOC,OAET,+BACE,0CACA,+BAAOC,OAET,+BACE,sDACA,iCAAOC,EAAP,kB,OCyBGC,E,4MAhDbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,mBAAqB,WAAO,IAAD,EACM,EAAKD,MACpC,OAFyB,EACjBN,KADiB,EACXC,QADW,EACFC,K,EAIzBM,gCAAkC,WAChC,IAAML,EAAQ,EAAKI,qBACXP,EAAS,EAAKM,MAAdN,KACR,OAAOS,KAAKC,MAAOV,EAAOG,EAAS,M,EAGrCd,gBAAkB,SAAAK,GAChB,EAAKiB,UAAS,SAAAC,GACZ,OAAO,eAAGlB,EAAOkB,EAAUlB,GAAQ,O,uDAI7B,IAAD,EACwBmB,KAAKP,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQU,KAAKN,qBAEnB,OACE,8BACE,eAAC,EAAD,CAAStB,MAAM,wBAAf,UACE,cAAC,EAAD,CACEG,QAASA,EACTC,gBAAiBwB,KAAKxB,kBAExB,cAAC,EAAD,CACEW,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBS,KAAKL,kCACzBM,UAAWD,KAAKE,2B,GAzCVC,aCHlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,W","file":"static/js/main.dc896c45.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div className=\"group-button\">\n    {options.map(({ id, name, type }) => (\n      <button type=\"button\" key={id} onClick={() => onLeaveFeedback(type)}>\n        {name}\n      </button>\n    ))}\n  </div>\n);\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <h3>{message}</h3>;\n}\n\nNotification.defaultProps = {\n  message: 'No feedback given',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Notification from '../Notification/Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <h2>Statistics</h2>\n\n      {total === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : (\n        <ul>\n          <li>\n            <span>Good:</span>\n            <span>{good}</span>\n          </li>\n          <li>\n            <span>Neutral:</span>\n            <span>{neutral}</span>\n          </li>\n          <li>\n            <span>Bad:</span>\n            <span>{bad}</span>\n          </li>\n          <li>\n            <span>Total:</span>\n            <span>{total}</span>\n          </li>\n          <li>\n            <span>Positive feedback:</span>\n            <span>{positivePercentage} %</span>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n","import Section from './components/Feedback/Section';\nimport React, { Component } from 'react';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport options from './data/options.json';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const { good } = this.state;\n    return Math.round((good / total) * 100);\n  };\n\n  onLeaveFeedback = type => {\n    this.setState(prevState => {\n      return { [type]: prevState[type] + 1 };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    \n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n            onChanged={this.feedbackChanged}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}